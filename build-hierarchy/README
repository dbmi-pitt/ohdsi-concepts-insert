Generate URI-list.csv from LAERTES-cdm:
	SELECT concept_name, vocabulary_id, CONCAT(vocabulary_id, '_', concept_code) AS uri
	FROM concept 
	WHERE concept_id < 0 AND concept_code != 'OMOP generated' ORDER BY uri;

hierarchy.py:
	Loop through each URI in URI-list.csv and query SPARQL through the SPARQLWrapper library:

	Query for ANCESTORS:
    	q = '''
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        SELECT ?path ?label ?link FROM <%s> WHERE {
            {
                SELECT ?s ?o ?label WHERE {
                    {
                        ?s rdfs:subClassOf ?o .
                        FILTER (isIRI(?o)).
                        OPTIONAL {?o rdfs:label ?label}
                    } UNION {
                        ?s owl:equivalentClass ?s1 .
                        ?s1 owl:intersectionOf ?s2 .
                        ?s2 rdf:first ?o  .
                        FILTER (isIRI(?o))
                        OPTIONAL {?o rdfs:label ?label}
                    }
                    FILTER ( ?s != ?o )
                }
            }
            OPTION (TRANSITIVE, t_in(?s), t_out(?o), t_step (?s) as ?link, t_step ('path_id') as ?path).
            FILTER (isIRI(?o)).
            FILTER (?s= <%s>)
        } ORDER BY DESC (?path)
        ''' % (vocabUri, fullUri)

    	Query for DESCENDANTS:
    	q = '''
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        SELECT DISTINCT ?label ?term FROM <%s> WHERE {
            {
                ?term rdfs:subClassOf ?s .
                FILTER (?s = <%s>)
                FILTER (isIRI(?term)).
                OPTIONAL {?term rdfs:label ?label} .
                OPTIONAL {?subTerm rdfs:subClassOf ?term}
            }
        }
        ''' % (vocabUri, fullUri)

    For ANCESTORS: Via looping through the SPARQL results, record the maximum path value and for these path values, add the labels in the "ancestors" dictionary via incrementing ancestor levels as ancestor keys.

    For DESCENDANTS: Add labels in the reutrn query into the "descendants" dictionary via incrementing descendant levels as descendant keys.

    Use CONCEPT_RELATIONSHIP table:
    ancestors "subsume" descendants = relationship id 44818723
    descendant "is a" ancestor = relationship id 44818821

    http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_relationship

    OUTPUTS for hierarchy.py:
    (in "output folder")
    URI-hierarchy.csv = 5 levels of ancestors and descendants from a given URI.
    URI-relationships.csv = relationships from ancestor and descendant queries: 
        5 levels of ancestors from a given URI, written out in a format more suited for creating "insert" statements for the "concept_relationship" table. Each concept is printed with its reverse relationship (a given URI "is a" ancestor while the URI's ancestor "subsumes" the URI).
        Also includes all descendants from a given URI. Each concept is printed with its reverse relationship (a given URI "subsumes" its descendant while the URI's descendant "is a" URI)
    new-vocab.csv = vocabularies that do not currently exist in the Laertes_cdm database.
    full-vocab.csv = all vocabularies that show up in the URI list and its ancestors/descendants.
    new-concepts.csv = concepts that do not currently exist in the Laertes_cdm database.
    full-vocab.csv = all concepts that show up in the URI list and its ancestors/descendants.

createInsertStatements.py:
Depends on output from hierarchy.py - uses files URI-ancestors.csv, URI-descendants.csv, new-vocab.csv, new-concepts.csv, full-concepts.csv to create INSERT statements into Laertes_cdm.

Output .sql scripts from createInsertStatements.py in "sql" folder.
ATTN: For finding information about new vocabularies, go to ontobee.org. Information needed for the "insert" statements into the "vocabulary" table can be found for each vocabulary. 
***The "load-vocab.sql" script is therefore manually completed from this info used with the vocabs in "output/new-vocab.csv"***
<<<<<<< HEAD
NOTE: Can't find date for "vocabulary_version" column on Ontobee, so script uses today's date.

ORDER OF RUNNING SQL SCRIPTS:
load-vocab-concepts.sql
load-vocab.sql
load-concepts.sql
The remaining four scripts (load-ancestors-relationships.sql, load-ancestors-hierarchy.sql, load-descendants-relationships.sql, load-descendants-hierarchy.sql) can be run in any order.

If duplicates arise in concept_relationship and concept_ancestor tables, they can be found with:

    SELECT concept_id_1, concept_id_2, relationship_id, COUNT(*) 
    FROM concept_relationship 
    WHERE concept_id_1 < 0 AND concept_id_2 < 0 
    GROUP BY concept_id_1, concept_id_2, relationship_id
    HAVING COUNT(*)>1;

    SELECT ancestor_concept_id, descendant_concept_id, COUNT(*) 
    FROM concept_ancestor 
    WHERE ancestor_concept_id < 0 AND descendant_concept_id < 0
    GROUP BY ancestor_concept_id, descendant_concept_id
    HAVING COUNT(*) > 0;

NOTE: Can't find date for "vocabulary_version" column on Ontobee, so script uses today's date.

NOTE: concepts added use first 255 characters, as schema does not handle any more.